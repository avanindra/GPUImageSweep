/*
 * =====================================================================================
 *       Filename:  image_acquirer.cpp
 *    Description:  This class interfaces with the webcam to receive the images
 *        Created:  2014-10-24 10:35
 *         Author:  Tiago Lobato Gimenes        (tlgimenes@gmail.com)
 * =====================================================================================
 */

////////////////////////////////////////////////////////////////////////////////////////

#include "image_acquirer.hpp"

////////////////////////////////////////////////////////////////////////////////////////

ImageAcquirer::ImageAcquirer() :
    _img1(0),
    _img2(1)
{
    /* Nothing to do here */
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLfloat>>& ImageAcquirer::vertex_coord1()
{
    return _img1.vertex_coord();
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLubyte>>& ImageAcquirer::vertex_color1()
{
    return _img1.vertex_color();
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLuint>> & ImageAcquirer::vertex_index1()
{
    return _img1.vertex_index();
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLfloat>>& ImageAcquirer::vertex_coord2()
{
    return _img2.vertex_coord();
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLubyte>>& ImageAcquirer::vertex_color2()
{
    return _img2.vertex_color();
}

////////////////////////////////////////////////////////////////////////////////////////

 std::vector<struct point3D<GLuint>> & ImageAcquirer::vertex_index2()
{
    return _img2.vertex_index();
}

////////////////////////////////////////////////////////////////////////////////////////

 cv::Mat ImageAcquirer::img1()
{
    return _img1.img();
}

////////////////////////////////////////////////////////////////////////////////////////

ImageAcquirerSingleCamera& ImageAcquirer::acquirer1()
{
    return _img1;
}

////////////////////////////////////////////////////////////////////////////////////////

ImageAcquirerSingleCamera& ImageAcquirer::acquirer2()
{
    return _img2;
}

////////////////////////////////////////////////////////////////////////////////////////

 cv::Mat ImageAcquirer::img2()
{
    return _img2.img();
}

////////////////////////////////////////////////////////////////////////////////////////

 int ImageAcquirer::width()
{
    return _img1.width();
}

////////////////////////////////////////////////////////////////////////////////////////

 int ImageAcquirer::height()
{
    return _img1.height();
}

////////////////////////////////////////////////////////////////////////////////////////
